# union targetValue = Test1 | Test2 | Test3

input Test1{
    userId: String!
    targetName: String
    targetValue: String
}

# type Test2{
#     tmp2: Int
# }

# type Test3{
#     tmp3: Boolean
# }

type Scholarship {
    id: String
    institution: String
    product: String
    institutionSort: String
    productSort: String
    schoolexpenseSort: String
    univSort: String
    gradeSort: String
    majorSort: String
    gradeStandDetail: String
    incomeStandDetail: String
    supportDetail: String
    qualificationDetail: String
    localResidenceDetail: String
    selectionWayDetail: String
    selectionNumDetail: String
    qualificationRestrictionDetail: String
    recommendationDetail: String
    documentationDetail: String
    createdDt: String
    modifiedDt: String
    showNum: String
    scrapNum: String
    startDate: String
    endDate: String
    gradeStand: String
    scholarshipType: String
    incomeStand: String
    allowMultiple: String
}

type Notice {
    id: Int
    title: String
    content: String
    createdDt: String
    modifiedDt: String
}

input NoticeInput {
    id: Int!
    title: String
    content: String
}

input FilterInput {
    school: String
    department: String
    major: String
    grade: String
    attendance: String
    incomeBracket: String
    specialClass: [String]
    address: String
    scholarshipTypes: [String]
    duplicateBenefit: Boolean
}
input UserInput {
    name: String!
    email: String!
    age: Int!
    birthDate: String!
    gender: String!
    phoneNumber: String!
    school: String
    schoolBelong: String
    attendance: String
    major: String
    stratum: String
    income: String
    prevGrade: String
    address: String
    isMarried: Boolean
    famCum: Int
    monthIncome: Int
    parentAddress: String
    parentJob: String
    remainedSemester: Int
    isLeaveAbsence: Boolean
}

type User {
    name: String
    email: String
    age: Int
    birthDate: String
    gender: String
    phoneNumber: String
    school: String
    schoolBelong: String
    attendance: String
    major: String
    stratum: String
    income: String
    prevGrade: String
    address: String
    isMarried: Boolean
    famCum: Int
    monthIncome: Int
    paraentAddress: String
    parentJob: String
    remainedSemester: Int
    isLeaveAbsence: Boolean
}

type Result{
    errorMsg: String
    resultCode: Int
    resultMsg: String
}

type CupidToken{
    accessToken: String
    refreshToken: String
    grantType: String 
}

type Query {
    signInUp(
        kakaoAccessToken: String!
    ): CupidToken

    getAllScholarships: [Scholarship]

    getScholarshipDetail(
        scholarshipId: String!
    ): Scholarship
    scholarshipFilter(
        filterInput: FilterInput
    ): [Scholarship]
    
    searchScholarships(
        searchWord: String!
    ): [Scholarship]

    getScrapList(
        userId: String!
    ): [String]

    getUserDetail(
        userId: String!
    ): User

    getNoticeList: [Notice]
}

type Mutation {
    addScrap(
        userId: String!
        scholarshipId: String!
    ): Result
    deleteScrap(
        userId: String!
        scholarshipId: String!
    ): Result
    updateUser(
        userInput: UserInput
    ): Result

    addNotice(
        noticeInput: NoticeInput
    ): Result

    deleteNotice(
        noticeInput: NoticeInput
    ): Result

    modifyNotice(
        noticeInput: NoticeInput
    ): Result
}